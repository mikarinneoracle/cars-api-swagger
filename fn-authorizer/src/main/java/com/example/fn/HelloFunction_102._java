package com.example.fn;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fnproject.fn.api.FnConfiguration;
import com.fnproject.fn.api.Headers;
import com.fnproject.fn.api.InputEvent;

import com.fnproject.fn.api.RuntimeContext;
import com.fnproject.fn.api.httpgateway.HTTPGatewayContext;

import java.io.*;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.Base64;
import java.util.List;
import java.util.stream.Collectors;

import redis.clients.jedis.Jedis;

public class HelloFunction {

    String redisConfig = "";
    Jedis jedis = null;

    @FnConfiguration
    public void setUp(RuntimeContext ctx) throws Exception {
        redisConfig = ctx.getConfigurationByKey("redis").orElse(System.getenv().getOrDefault("redis", ""));
        try {
            System.out.println("Redis config: " + redisConfig);
            jedis = new Jedis(redisConfig, 6379, true);
        } catch (Exception e) {
            System.out.println("Redis error:" + e.getMessage());
        }
    }


    public String handleRequest(final HTTPGatewayContext hctx, final InputEvent input) {

        boolean IS_FOUND = false;
        String ret = "";
        String username = "";

        String json = input.consumeBody((InputStream is) -> {
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(is))) {
                return reader.lines().collect(Collectors.joining());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        });
        System.out.println("JSON: " + json);

        if(json.length() > 0) {
            // Search from Redis - no fallback
            // Reading Cookie Header contents
            if(redisConfig.length() > 0) {
                System.out.println("Auth with Redis");
                try {
                    ObjectMapper objectMapper = new ObjectMapper();
                    Body body = objectMapper.readValue(json, Body.class);
                    System.out.println("Body token: " + body.token);
                    String[] bearerTokens = body.token.split(";");
                    List<String> tokenizedBearer = Arrays.stream(bearerTokens).map(String::trim).collect(Collectors.toList());
                    for (String cookie : tokenizedBearer) {
                        System.out.println(cookie);
                        if (cookie.indexOf("bearer=") > -1) {
                            String bearer = cookie.substring(cookie.indexOf("bearer=") + 7, cookie.length());
                            if (bearer.length() > 0) {
                                String decodedBearer = new String(Base64.getDecoder().decode(bearer), StandardCharsets.UTF_8);
                                String[] decodedBearerTokens = decodedBearer.split(":");
                                String decodedUsername = decodedBearerTokens[0];
                                String decodedPassword = decodedBearerTokens[1];
                                String password = jedis.get(decodedUsername);
                                if (decodedPassword.equals(password)) {
                                    System.out.println("REDIS AUTH SUCCESS " + decodedUsername + "/" + decodedPassword);
                                    IS_FOUND = true;
                                    username = decodedUsername;
                                } else {
                                    System.out.println("REDIS AUTH NO MATCH! " + decodedUsername + "/" + decodedPassword);
                                }
                            }
                        }
                    }
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            }
        }

        // Use header transformation in APIGW Route to get username in headers from this response
        // in the target function:
        // Overwrite	username     ${request.auth[username]}
        if(IS_FOUND) {
            LocalDateTime dateTime = LocalDateTime.now().plusDays(1);
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'+00:00'");
            String expiryDate = dateTime.format(formatter);
            ret = "{ " +
                    "\"active\": true," +
                    "\"principal\": \"myprincipal\"," +
                    "\"scope\": [\"Cars-API\"]," +
                    "\"expiresAt\": \"" + expiryDate + "\"," +
                    "\"context\": { \"username\": \"" + username + "\" }" +
                    " }";
        } else {
            ret = "{ " +
                    "\"active\": false," +
                    "\"wwwAuthenticate\": \"Bearer realm=\\\"somesite.io\\\"\"" +
                    " }";
        }
        System.out.println(ret);
        return ret;
    }
}